// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: scanner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scanner_Scan_FullMethodName           = "/corkscrew.Scanner/Scan"
	Scanner_GetSchemas_FullMethodName     = "/corkscrew.Scanner/GetSchemas"
	Scanner_GetServiceInfo_FullMethodName = "/corkscrew.Scanner/GetServiceInfo"
	Scanner_StreamScan_FullMethodName     = "/corkscrew.Scanner/StreamScan"
)

// ScannerClient is the client API for Scanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The scanner service definition
type ScannerClient interface {
	// Main scanning operation
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	// Get SQL schemas for this service
	GetSchemas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SchemaResponse, error)
	// Get service metadata
	GetServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfoResponse, error)
	// Stream resources for large result sets
	StreamScan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error)
}

type scannerClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerClient(cc grpc.ClientConnInterface) ScannerClient {
	return &scannerClient{cc}
}

func (c *scannerClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, Scanner_Scan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) GetSchemas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, Scanner_GetSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) GetServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceInfoResponse)
	err := c.cc.Invoke(ctx, Scanner_GetServiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerClient) StreamScan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Scanner_ServiceDesc.Streams[0], Scanner_StreamScan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScanRequest, Resource]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scanner_StreamScanClient = grpc.ServerStreamingClient[Resource]

// ScannerServer is the server API for Scanner service.
// All implementations must embed UnimplementedScannerServer
// for forward compatibility.
//
// The scanner service definition
type ScannerServer interface {
	// Main scanning operation
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	// Get SQL schemas for this service
	GetSchemas(context.Context, *Empty) (*SchemaResponse, error)
	// Get service metadata
	GetServiceInfo(context.Context, *Empty) (*ServiceInfoResponse, error)
	// Stream resources for large result sets
	StreamScan(*ScanRequest, grpc.ServerStreamingServer[Resource]) error
	mustEmbedUnimplementedScannerServer()
}

// UnimplementedScannerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScannerServer struct{}

func (UnimplementedScannerServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedScannerServer) GetSchemas(context.Context, *Empty) (*SchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (UnimplementedScannerServer) GetServiceInfo(context.Context, *Empty) (*ServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedScannerServer) StreamScan(*ScanRequest, grpc.ServerStreamingServer[Resource]) error {
	return status.Errorf(codes.Unimplemented, "method StreamScan not implemented")
}
func (UnimplementedScannerServer) mustEmbedUnimplementedScannerServer() {}
func (UnimplementedScannerServer) testEmbeddedByValue()                 {}

// UnsafeScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerServer will
// result in compilation errors.
type UnsafeScannerServer interface {
	mustEmbedUnimplementedScannerServer()
}

func RegisterScannerServer(s grpc.ServiceRegistrar, srv ScannerServer) {
	// If the following call pancis, it indicates UnimplementedScannerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scanner_ServiceDesc, srv)
}

func _Scanner_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanner_Scan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanner_GetSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).GetSchemas(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanner_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).GetServiceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanner_StreamScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScannerServer).StreamScan(m, &grpc.GenericServerStream[ScanRequest, Resource]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Scanner_StreamScanServer = grpc.ServerStreamingServer[Resource]

// Scanner_ServiceDesc is the grpc.ServiceDesc for Scanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "corkscrew.Scanner",
	HandlerType: (*ScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _Scanner_Scan_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _Scanner_GetSchemas_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _Scanner_GetServiceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamScan",
			Handler:       _Scanner_StreamScan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scanner.proto",
}
