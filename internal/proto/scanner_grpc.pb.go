// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: scanner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudProvider_Initialize_FullMethodName              = "/corkscrew.CloudProvider/Initialize"
	CloudProvider_GetProviderInfo_FullMethodName         = "/corkscrew.CloudProvider/GetProviderInfo"
	CloudProvider_DiscoverServices_FullMethodName        = "/corkscrew.CloudProvider/DiscoverServices"
	CloudProvider_GenerateServiceScanners_FullMethodName = "/corkscrew.CloudProvider/GenerateServiceScanners"
	CloudProvider_ListResources_FullMethodName           = "/corkscrew.CloudProvider/ListResources"
	CloudProvider_DescribeResource_FullMethodName        = "/corkscrew.CloudProvider/DescribeResource"
	CloudProvider_GetSchemas_FullMethodName              = "/corkscrew.CloudProvider/GetSchemas"
	CloudProvider_BatchScan_FullMethodName               = "/corkscrew.CloudProvider/BatchScan"
	CloudProvider_StreamScan_FullMethodName              = "/corkscrew.CloudProvider/StreamScan"
	CloudProvider_ScanService_FullMethodName             = "/corkscrew.CloudProvider/ScanService"
	CloudProvider_GetServiceInfo_FullMethodName          = "/corkscrew.CloudProvider/GetServiceInfo"
	CloudProvider_StreamScanService_FullMethodName       = "/corkscrew.CloudProvider/StreamScanService"
	CloudProvider_ConfigureDiscovery_FullMethodName      = "/corkscrew.CloudProvider/ConfigureDiscovery"
	CloudProvider_AnalyzeDiscoveredData_FullMethodName   = "/corkscrew.CloudProvider/AnalyzeDiscoveredData"
	CloudProvider_GenerateFromAnalysis_FullMethodName    = "/corkscrew.CloudProvider/GenerateFromAnalysis"
)

// CloudProviderClient is the client API for CloudProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The main cloud provider service definition
type CloudProviderClient interface {
	// Plugin lifecycle
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	GetProviderInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderInfoResponse, error)
	// Service discovery and generation
	DiscoverServices(ctx context.Context, in *DiscoverServicesRequest, opts ...grpc.CallOption) (*DiscoverServicesResponse, error)
	GenerateServiceScanners(ctx context.Context, in *GenerateScannersRequest, opts ...grpc.CallOption) (*GenerateScannersResponse, error)
	// Resource operations following Discovery -> List -> Describe pattern
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	DescribeResource(ctx context.Context, in *DescribeResourceRequest, opts ...grpc.CallOption) (*DescribeResourceResponse, error)
	// Schema and metadata
	GetSchemas(ctx context.Context, in *GetSchemasRequest, opts ...grpc.CallOption) (*SchemaResponse, error)
	// Batch operations
	BatchScan(ctx context.Context, in *BatchScanRequest, opts ...grpc.CallOption) (*BatchScanResponse, error)
	StreamScan(ctx context.Context, in *StreamScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error)
	// Enhanced scanning methods to support all Scanner use cases
	ScanService(ctx context.Context, in *ScanServiceRequest, opts ...grpc.CallOption) (*ScanServiceResponse, error)
	GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error)
	StreamScanService(ctx context.Context, in *ScanServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error)
	// Orchestrator integration methods
	ConfigureDiscovery(ctx context.Context, in *ConfigureDiscoveryRequest, opts ...grpc.CallOption) (*ConfigureDiscoveryResponse, error)
	AnalyzeDiscoveredData(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalysisResponse, error)
	GenerateFromAnalysis(ctx context.Context, in *GenerateFromAnalysisRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type cloudProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudProviderClient(cc grpc.ClientConnInterface) CloudProviderClient {
	return &cloudProviderClient{cc}
}

func (c *cloudProviderClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, CloudProvider_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) GetProviderInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProviderInfoResponse)
	err := c.cc.Invoke(ctx, CloudProvider_GetProviderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) DiscoverServices(ctx context.Context, in *DiscoverServicesRequest, opts ...grpc.CallOption) (*DiscoverServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverServicesResponse)
	err := c.cc.Invoke(ctx, CloudProvider_DiscoverServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) GenerateServiceScanners(ctx context.Context, in *GenerateScannersRequest, opts ...grpc.CallOption) (*GenerateScannersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateScannersResponse)
	err := c.cc.Invoke(ctx, CloudProvider_GenerateServiceScanners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, CloudProvider_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) DescribeResource(ctx context.Context, in *DescribeResourceRequest, opts ...grpc.CallOption) (*DescribeResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeResourceResponse)
	err := c.cc.Invoke(ctx, CloudProvider_DescribeResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) GetSchemas(ctx context.Context, in *GetSchemasRequest, opts ...grpc.CallOption) (*SchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, CloudProvider_GetSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) BatchScan(ctx context.Context, in *BatchScanRequest, opts ...grpc.CallOption) (*BatchScanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchScanResponse)
	err := c.cc.Invoke(ctx, CloudProvider_BatchScan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) StreamScan(ctx context.Context, in *StreamScanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudProvider_ServiceDesc.Streams[0], CloudProvider_StreamScan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamScanRequest, Resource]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudProvider_StreamScanClient = grpc.ServerStreamingClient[Resource]

func (c *cloudProviderClient) ScanService(ctx context.Context, in *ScanServiceRequest, opts ...grpc.CallOption) (*ScanServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanServiceResponse)
	err := c.cc.Invoke(ctx, CloudProvider_ScanService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceInfoResponse)
	err := c.cc.Invoke(ctx, CloudProvider_GetServiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) StreamScanService(ctx context.Context, in *ScanServiceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Resource], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudProvider_ServiceDesc.Streams[1], CloudProvider_StreamScanService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScanServiceRequest, Resource]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudProvider_StreamScanServiceClient = grpc.ServerStreamingClient[Resource]

func (c *cloudProviderClient) ConfigureDiscovery(ctx context.Context, in *ConfigureDiscoveryRequest, opts ...grpc.CallOption) (*ConfigureDiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureDiscoveryResponse)
	err := c.cc.Invoke(ctx, CloudProvider_ConfigureDiscovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) AnalyzeDiscoveredData(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalysisResponse)
	err := c.cc.Invoke(ctx, CloudProvider_AnalyzeDiscoveredData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderClient) GenerateFromAnalysis(ctx context.Context, in *GenerateFromAnalysisRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, CloudProvider_GenerateFromAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudProviderServer is the server API for CloudProvider service.
// All implementations must embed UnimplementedCloudProviderServer
// for forward compatibility.
//
// The main cloud provider service definition
type CloudProviderServer interface {
	// Plugin lifecycle
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	GetProviderInfo(context.Context, *Empty) (*ProviderInfoResponse, error)
	// Service discovery and generation
	DiscoverServices(context.Context, *DiscoverServicesRequest) (*DiscoverServicesResponse, error)
	GenerateServiceScanners(context.Context, *GenerateScannersRequest) (*GenerateScannersResponse, error)
	// Resource operations following Discovery -> List -> Describe pattern
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	DescribeResource(context.Context, *DescribeResourceRequest) (*DescribeResourceResponse, error)
	// Schema and metadata
	GetSchemas(context.Context, *GetSchemasRequest) (*SchemaResponse, error)
	// Batch operations
	BatchScan(context.Context, *BatchScanRequest) (*BatchScanResponse, error)
	StreamScan(*StreamScanRequest, grpc.ServerStreamingServer[Resource]) error
	// Enhanced scanning methods to support all Scanner use cases
	ScanService(context.Context, *ScanServiceRequest) (*ScanServiceResponse, error)
	GetServiceInfo(context.Context, *GetServiceInfoRequest) (*ServiceInfoResponse, error)
	StreamScanService(*ScanServiceRequest, grpc.ServerStreamingServer[Resource]) error
	// Orchestrator integration methods
	ConfigureDiscovery(context.Context, *ConfigureDiscoveryRequest) (*ConfigureDiscoveryResponse, error)
	AnalyzeDiscoveredData(context.Context, *AnalyzeRequest) (*AnalysisResponse, error)
	GenerateFromAnalysis(context.Context, *GenerateFromAnalysisRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedCloudProviderServer()
}

// UnimplementedCloudProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudProviderServer struct{}

func (UnimplementedCloudProviderServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedCloudProviderServer) GetProviderInfo(context.Context, *Empty) (*ProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderInfo not implemented")
}
func (UnimplementedCloudProviderServer) DiscoverServices(context.Context, *DiscoverServicesRequest) (*DiscoverServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverServices not implemented")
}
func (UnimplementedCloudProviderServer) GenerateServiceScanners(context.Context, *GenerateScannersRequest) (*GenerateScannersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateServiceScanners not implemented")
}
func (UnimplementedCloudProviderServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedCloudProviderServer) DescribeResource(context.Context, *DescribeResourceRequest) (*DescribeResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeResource not implemented")
}
func (UnimplementedCloudProviderServer) GetSchemas(context.Context, *GetSchemasRequest) (*SchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (UnimplementedCloudProviderServer) BatchScan(context.Context, *BatchScanRequest) (*BatchScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchScan not implemented")
}
func (UnimplementedCloudProviderServer) StreamScan(*StreamScanRequest, grpc.ServerStreamingServer[Resource]) error {
	return status.Errorf(codes.Unimplemented, "method StreamScan not implemented")
}
func (UnimplementedCloudProviderServer) ScanService(context.Context, *ScanServiceRequest) (*ScanServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanService not implemented")
}
func (UnimplementedCloudProviderServer) GetServiceInfo(context.Context, *GetServiceInfoRequest) (*ServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedCloudProviderServer) StreamScanService(*ScanServiceRequest, grpc.ServerStreamingServer[Resource]) error {
	return status.Errorf(codes.Unimplemented, "method StreamScanService not implemented")
}
func (UnimplementedCloudProviderServer) ConfigureDiscovery(context.Context, *ConfigureDiscoveryRequest) (*ConfigureDiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDiscovery not implemented")
}
func (UnimplementedCloudProviderServer) AnalyzeDiscoveredData(context.Context, *AnalyzeRequest) (*AnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeDiscoveredData not implemented")
}
func (UnimplementedCloudProviderServer) GenerateFromAnalysis(context.Context, *GenerateFromAnalysisRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFromAnalysis not implemented")
}
func (UnimplementedCloudProviderServer) mustEmbedUnimplementedCloudProviderServer() {}
func (UnimplementedCloudProviderServer) testEmbeddedByValue()                       {}

// UnsafeCloudProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudProviderServer will
// result in compilation errors.
type UnsafeCloudProviderServer interface {
	mustEmbedUnimplementedCloudProviderServer()
}

func RegisterCloudProviderServer(s grpc.ServiceRegistrar, srv CloudProviderServer) {
	// If the following call pancis, it indicates UnimplementedCloudProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudProvider_ServiceDesc, srv)
}

func _CloudProvider_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_GetProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).GetProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_GetProviderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).GetProviderInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_DiscoverServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).DiscoverServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_DiscoverServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).DiscoverServices(ctx, req.(*DiscoverServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_GenerateServiceScanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateScannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).GenerateServiceScanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_GenerateServiceScanners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).GenerateServiceScanners(ctx, req.(*GenerateScannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_DescribeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).DescribeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_DescribeResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).DescribeResource(ctx, req.(*DescribeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_GetSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).GetSchemas(ctx, req.(*GetSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_BatchScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).BatchScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_BatchScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).BatchScan(ctx, req.(*BatchScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_StreamScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudProviderServer).StreamScan(m, &grpc.GenericServerStream[StreamScanRequest, Resource]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudProvider_StreamScanServer = grpc.ServerStreamingServer[Resource]

func _CloudProvider_ScanService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).ScanService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_ScanService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).ScanService(ctx, req.(*ScanServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).GetServiceInfo(ctx, req.(*GetServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_StreamScanService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudProviderServer).StreamScanService(m, &grpc.GenericServerStream[ScanServiceRequest, Resource]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudProvider_StreamScanServiceServer = grpc.ServerStreamingServer[Resource]

func _CloudProvider_ConfigureDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).ConfigureDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_ConfigureDiscovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).ConfigureDiscovery(ctx, req.(*ConfigureDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_AnalyzeDiscoveredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).AnalyzeDiscoveredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_AnalyzeDiscoveredData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).AnalyzeDiscoveredData(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProvider_GenerateFromAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFromAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServer).GenerateFromAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProvider_GenerateFromAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServer).GenerateFromAnalysis(ctx, req.(*GenerateFromAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudProvider_ServiceDesc is the grpc.ServiceDesc for CloudProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "corkscrew.CloudProvider",
	HandlerType: (*CloudProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _CloudProvider_Initialize_Handler,
		},
		{
			MethodName: "GetProviderInfo",
			Handler:    _CloudProvider_GetProviderInfo_Handler,
		},
		{
			MethodName: "DiscoverServices",
			Handler:    _CloudProvider_DiscoverServices_Handler,
		},
		{
			MethodName: "GenerateServiceScanners",
			Handler:    _CloudProvider_GenerateServiceScanners_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _CloudProvider_ListResources_Handler,
		},
		{
			MethodName: "DescribeResource",
			Handler:    _CloudProvider_DescribeResource_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _CloudProvider_GetSchemas_Handler,
		},
		{
			MethodName: "BatchScan",
			Handler:    _CloudProvider_BatchScan_Handler,
		},
		{
			MethodName: "ScanService",
			Handler:    _CloudProvider_ScanService_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _CloudProvider_GetServiceInfo_Handler,
		},
		{
			MethodName: "ConfigureDiscovery",
			Handler:    _CloudProvider_ConfigureDiscovery_Handler,
		},
		{
			MethodName: "AnalyzeDiscoveredData",
			Handler:    _CloudProvider_AnalyzeDiscoveredData_Handler,
		},
		{
			MethodName: "GenerateFromAnalysis",
			Handler:    _CloudProvider_GenerateFromAnalysis_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamScan",
			Handler:       _CloudProvider_StreamScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamScanService",
			Handler:       _CloudProvider_StreamScanService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scanner.proto",
}
