syntax = "proto3";

package corkscrew;
option go_package = "github.com/jlgore/corkscrew/internal/proto";

import "google/protobuf/timestamp.proto";

// The main cloud provider service definition
service CloudProvider {
  // Plugin lifecycle
  rpc Initialize(InitializeRequest) returns (InitializeResponse);
  rpc GetProviderInfo(Empty) returns (ProviderInfoResponse);
  
  // Service discovery and generation
  rpc DiscoverServices(DiscoverServicesRequest) returns (DiscoverServicesResponse);
  rpc GenerateServiceScanners(GenerateScannersRequest) returns (GenerateScannersResponse);
  
  // Resource operations following Discovery -> List -> Describe pattern
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse);
  rpc DescribeResource(DescribeResourceRequest) returns (DescribeResourceResponse);
  
  // Schema and metadata
  rpc GetSchemas(GetSchemasRequest) returns (SchemaResponse);
  
  // Batch operations
  rpc BatchScan(BatchScanRequest) returns (BatchScanResponse);
  rpc StreamScan(StreamScanRequest) returns (stream Resource);
  
  // Enhanced scanning methods to support all Scanner use cases
  rpc ScanService(ScanServiceRequest) returns (ScanServiceResponse);
  rpc GetServiceInfo(GetServiceInfoRequest) returns (ServiceInfoResponse);
  rpc StreamScanService(ScanServiceRequest) returns (stream Resource);
  
  // Orchestrator integration methods
  rpc ConfigureDiscovery(ConfigureDiscoveryRequest) returns (ConfigureDiscoveryResponse);
  rpc AnalyzeDiscoveredData(AnalyzeRequest) returns (AnalysisResponse);
  rpc GenerateFromAnalysis(GenerateFromAnalysisRequest) returns (GenerateResponse);
}

message Empty {}

// Plugin lifecycle messages
message InitializeRequest {
  string provider = 1;
  map<string, string> config = 2;
  string cache_dir = 3;
}

message InitializeResponse {
  bool success = 1;
  string error = 2;
  string version = 3;
  map<string, string> metadata = 4;
}

message ProviderInfoResponse {
  string name = 1;
  string version = 2;
  repeated string supported_services = 3;
  map<string, string> capabilities = 4;
  string description = 5;
}

// Service discovery messages
message DiscoverServicesRequest {
  bool force_refresh = 1;
  repeated string include_services = 2;
  repeated string exclude_services = 3;
}

message DiscoverServicesResponse {
  repeated ServiceInfo services = 1;
  google.protobuf.Timestamp discovered_at = 2;
  string sdk_version = 3;
}

message ServiceInfo {
  string name = 1;
  string display_name = 2;
  string package_name = 3;
  string client_type = 4;
  repeated ResourceType resource_types = 5;
  repeated string required_permissions = 6;
}

message ResourceType {
  string name = 1;
  string type_name = 2;
  string list_operation = 3;
  string describe_operation = 4;
  string get_operation = 5;
  string id_field = 6;
  string name_field = 7;
  string arn_field = 8;
  bool supports_tags = 9;
  bool paginated = 10;
  repeated ResourceRelationship relationships = 11;
}

message ResourceRelationship {
  string target_type = 1;
  string relationship_type = 2;
  string field_name = 3;
  bool is_array = 4;
}

// Scanner generation messages
message GenerateScannersRequest {
  repeated string services = 1;
  bool generate_all = 2;
  bool force_regenerate = 3;
}

message GenerateScannersResponse {
  repeated GeneratedScanner scanners = 1;
  repeated string errors = 2;
  int32 generated_count = 3;
}

message GeneratedScanner {
  string service = 1;
  string file_path = 2;
  repeated string resource_types = 3;
  google.protobuf.Timestamp generated_at = 4;
}

// Resource operation messages
message ListResourcesRequest {
  string service = 1;
  string resource_type = 2;
  string region = 3;
  map<string, string> filters = 4;
  string next_token = 5;
  int32 max_results = 6;
}

message ListResourcesResponse {
  repeated ResourceRef resources = 1;
  string next_token = 2;
  int32 total_count = 3;
  map<string, string> metadata = 4;
}

message ResourceRef {
  string id = 1;
  string name = 2;
  string type = 3;
  string service = 4;
  string region = 5;
  map<string, string> basic_attributes = 6;
}

message DescribeResourceRequest {
  ResourceRef resource_ref = 1;
  bool include_relationships = 2;
  bool include_tags = 3;
}

message DescribeResourceResponse {
  Resource resource = 1;
  string error = 2;
}

// Universal resource model
message Resource {
  // Core identification
  string provider = 1;
  string service = 2;
  string type = 3;
  string id = 4;
  string name = 5;
  
  // Location and hierarchy
  string region = 6;
  string account_id = 7;
  string parent_id = 8;
  string arn = 9;
  
  // Metadata
  map<string, string> tags = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp modified_at = 12;
  google.protobuf.Timestamp discovered_at = 13;
  
  // Relationships and raw data
  repeated Relationship relationships = 14;
  string raw_data = 15;
  string attributes = 16;
}

message Relationship {
  string target_id = 1;
  string target_type = 2;
  string target_service = 3;
  string relationship_type = 4;
  map<string, string> properties = 5;
}

// Schema messages
message GetSchemasRequest {
  repeated string services = 1;
  string format = 2; // "sql", "json", etc.
}

message SchemaResponse {
  repeated Schema schemas = 1;
}

message Schema {
  string name = 1;
  string service = 2;
  string resource_type = 3;
  string sql = 4;
  string description = 5;
  map<string, string> metadata = 6;
}

// Batch scanning messages
message BatchScanRequest {
  repeated string services = 1;
  repeated string resource_types = 2;
  string region = 3;
  map<string, string> filters = 4;
  bool include_relationships = 5;
  int32 concurrency = 6;
}

message BatchScanResponse {
  repeated Resource resources = 1;
  ScanStats stats = 2;
  repeated string errors = 3;
}

message StreamScanRequest {
  repeated string services = 1;
  repeated string resource_types = 2;
  string region = 3;
  map<string, string> filters = 4;
  bool include_relationships = 5;
}

message ScanStats {
  int32 total_resources = 1;
  int32 failed_resources = 2;
  int64 duration_ms = 3;
  map<string, int32> resource_counts = 4;
  map<string, int32> service_counts = 5;
}

message ServiceInfoResponse {
  string service_name = 1;
  string version = 2;
  repeated string supported_resources = 3;
  repeated string required_permissions = 4;
  map<string, string> capabilities = 5;
}

// Enhanced messages for single-service scanning and compatibility
message ScanServiceRequest {
  string service = 1;                    // Single service to scan
  string region = 2;                     // Target region
  repeated string resource_types = 3;     // Optional resource type filter
  map<string, string> filters = 4;       // Resource filters
  bool include_relationships = 5;         // Include relationships
  string next_token = 6;                 // Pagination token
  int32 max_results = 7;                 // Result limit
  map<string, string> options = 8;       // Legacy compatibility options
}

message ScanServiceResponse {
  repeated Resource resources = 1;        // Discovered resources
  string next_token = 2;                 // Next pagination token
  string service = 3;                    // Service that was scanned
  ScanStats stats = 4;                   // Scan statistics
  map<string, string> metadata = 5;      // Service metadata
  repeated string errors = 6;            // Non-fatal errors
}

message GetServiceInfoRequest {
  string service = 1;                    // Specific service name
  bool include_resource_types = 2;       // Include detailed resource type info
  bool include_permissions = 3;          // Include required permissions
  bool include_capabilities = 4;         // Include service capabilities
}

message ServiceScanMetadata {
  string service = 1;
  int32 resource_count = 2;
  int64 scan_duration_ms = 3;
  repeated string errors = 4;
  map<string, string> metadata = 5;
}

// Orchestrator integration messages
message ConfigureDiscoveryRequest {
  repeated DiscoverySourceConfig sources = 1;
  map<string, string> options = 2;
}

message ConfigureDiscoveryResponse {
  bool success = 1;
  string error = 2;
  repeated string configured_sources = 3;
  map<string, string> metadata = 4;
}

message DiscoverySourceConfig {
  string source_type = 1; // "github" or "api"
  map<string, string> config = 2;
}

message AnalyzeRequest {
  string source_type = 1;
  bytes raw_data = 2; // Raw discovery data
  map<string, string> options = 3;
}

message AnalysisResponse {
  repeated ServiceAnalysis services = 1;
  repeated ResourceAnalysis resources = 2;
  repeated OperationAnalysis operations = 3;
  map<string, string> metadata = 4;
  repeated string warnings = 5;
  bool success = 6;
  string error = 7;
}

message ServiceAnalysis {
  string name = 1;
  string display_name = 2;
  string description = 3;
  string version = 4;
  string package_name = 5;
  repeated string operations = 6;
  map<string, string> metadata = 7;
}

message ResourceAnalysis {
  string name = 1;
  string service = 2;
  string display_name = 3;
  string description = 4;
  repeated string identifiers = 5;
  repeated AttributeAnalysis attributes = 6;
  repeated string operations = 7;
  map<string, string> metadata = 8;
}

message AttributeAnalysis {
  string name = 1;
  string type = 2;
  bool required = 3;
  string description = 4;
  repeated string possible_values = 5;
}

message OperationAnalysis {
  string name = 1;
  string service = 2;
  string resource_type = 3;
  string operation_type = 4; // List, Get, Create, Update, Delete, Describe
  string description = 5;
  repeated ParameterAnalysis parameters = 6;
  ResponseAnalysis response = 7;
  bool paginated = 8;
  map<string, string> metadata = 9;
}

message ParameterAnalysis {
  string name = 1;
  string type = 2;
  bool required = 3;
  string description = 4;
  string default_value = 5;
}

message ResponseAnalysis {
  string type = 1;
  string description = 2;
  repeated AttributeAnalysis fields = 3;
}

message GenerateFromAnalysisRequest {
  AnalysisResponse analysis = 1;
  repeated string target_services = 2;
  map<string, string> options = 3;
}

message GenerateResponse {
  bool success = 1;
  string error = 2;
  repeated GeneratedFile files = 3;
  GenerationStats stats = 4;
  repeated string warnings = 5;
}

message GeneratedFile {
  string path = 1;
  string content = 2;
  string template = 3;
  string service = 4;
  string resource = 5;
  map<string, string> metadata = 6;
}

message GenerationStats {
  int32 total_files = 1;
  int32 total_services = 2;
  int32 total_resources = 3;
  int32 total_operations = 4;
  int64 generation_time_ms = 5;
  map<string, int32> file_counts_by_type = 6;
}
