package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
	"time"

	"github.com/jlgore/corkscrew/plugins/aws-provider/registry"
)

// ClientFactoryGenerator generates dynamic client factory code
type ClientFactoryGenerator struct {
	registry       *registry.UnifiedServiceRegistry
	outputPath     string
	packageName    string
	buildTag       string
	enableFallback bool
}

// NewClientFactoryGenerator creates a new client factory generator
func NewClientFactoryGenerator(reg *registry.UnifiedServiceRegistry, outputPath string) *ClientFactoryGenerator {
	return &ClientFactoryGenerator{
		registry:       reg,
		outputPath:     outputPath,
		packageName:    "main",
		buildTag:       "aws_services",
		enableFallback: true,
	}
}

// GenerateClientFactory generates the client factory code
func (g *ClientFactoryGenerator) GenerateClientFactory() error {
	// Get all services from registry
	services := g.registry.ListServiceDefinitions()
	if len(services) == 0 {
		return fmt.Errorf("no services found in registry")
	}

	// Sort services for consistent output
	sort.Slice(services, func(i, j int) bool {
		return services[i].Name < services[j].Name
	})

	// Generate the code
	code, err := g.generateCode(services)
	if err != nil {
		return fmt.Errorf("failed to generate code: %w", err)
	}

	// Format the code
	formatted, err := format.Source([]byte(code))
	if err != nil {
		return fmt.Errorf("failed to format code: %w", err)
	}

	// Ensure output directory exists
	dir := filepath.Dir(g.outputPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	// Write to file
	if err := os.WriteFile(g.outputPath, formatted, 0644); err != nil {
		return fmt.Errorf("failed to write file: %w", err)
	}

	return nil
}

// generateCode generates the client factory code from template
func (g *ClientFactoryGenerator) generateCode(services []registry.ServiceDefinition) (string, error) {
	tmpl := template.Must(template.New("clientFactory").Funcs(template.FuncMap{
		"extractPackageName": extractPackageName,
		"formatComment":      formatComment,
		"needsRegion":        needsRegion,
	}).Parse(clientFactoryTemplate))

	data := struct {
		BuildTag       string
		PackageName    string
		GeneratedAt    string
		Services       []registry.ServiceDefinition
		EnableFallback bool
	}{
		BuildTag:       g.buildTag,
		PackageName:    g.packageName,
		GeneratedAt:    time.Now().Format(time.RFC3339),
		Services:       services,
		EnableFallback: g.enableFallback,
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return "", err
	}

	return buf.String(), nil
}


// Helper functions
func extractPackageName(packagePath string) string {
	parts := strings.Split(packagePath, "/")
	return parts[len(parts)-1]
}

func formatComment(s string) string {
	if s == "" {
		return ""
	}
	return "// " + s
}

func needsRegion(service registry.ServiceDefinition) bool {
	return service.RequiresRegion && !service.GlobalService
}

// Template for generated client registry
const clientFactoryTemplate = `// Code generated by client_factory_generator.go at {{ .GeneratedAt }}. DO NOT EDIT.

package {{ .PackageName }}

import (
	"log"
	
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/jlgore/corkscrew/plugins/aws-provider/pkg/client"
	{{ range .Services }}
	{{ if .PackagePath }}{{ extractPackageName .PackagePath }} "{{ .PackagePath }}"{{ end }}
	{{ end }}
)

func init() {
	log.Printf("Initializing generated client factory with {{ len .Services }} AWS services")
	
	// Register all service client constructors
	{{ range .Services }}
	{{ if .PackagePath }}client.RegisterConstructor("{{ .Name }}", func(cfg aws.Config) interface{} {
		return {{ extractPackageName .PackagePath }}.NewFromConfig(cfg)
	})
	{{ end }}
	{{ end }}
	
	log.Printf("Successfully registered %d AWS service client constructors", len(client.ListRegisteredServices()))
	
	// Log all registered services for verification
	services := client.ListRegisteredServices()
	log.Printf("Registered services: %v", services)
}
`

